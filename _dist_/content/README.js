export const FRONTMATTER = {"secret-message":"You found the parsed Frontmatter!"};
export const HTML = "<blockquote>\n<p><strong>NOTE</strong>: This plugin comes preconfigured to parse JSON, TOML, and YAML Frontmatter!</p>\n</blockquote>\n<h2>Description</h2>\n<p>Simple Snowpack plugin for preprocessing Markdown files to HTML via rehype / remark</p>\n<h2>Sample</h2>\n<pre><code class=\"hljs language-javascript\"><span\n  class=\"hljs-comment\"\n>// Below, we're importing `remark`-based plugins that will give our</span>\n<span\n  class=\"hljs-comment\"\n>// header text GitHub-style `id=\"\"` slugs. And then automatically wrap them</span>\n<span class=\"hljs-comment\">// in hoverable links</span>\n<span class=\"hljs-keyword\">const</span> headings = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"remark-autolink-headings\"</span>);\n<span class=\"hljs-keyword\">const</span> slug = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"remark-slug\"</span>);\n\n<span\n  class=\"hljs-comment\"\n>// Next, we'll tell Snowpack to use the Markdown plugin and utilize</span>\n<span class=\"hljs-comment\">// the `remark`-based plugins</span>\n<span class=\"hljs-built_in\">module</span>.exports = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        [\n            <span class=\"hljs-string\">\"snowpack-plugin-markdown\"</span>,\n            {\n                <span class=\"hljs-attr\">remark</span>: [slug, headings],\n            },\n        ],\n    ],\n\n    <span\n  class=\"hljs-attr\"\n>mount</span>: {\n        <span class=\"hljs-attr\">public</span>: <span class=\"hljs-string\">\"/\"</span>,\n        <span class=\"hljs-attr\">src</span>: <span class=\"hljs-string\">\"/_dist_\"</span>,\n    },\n};</code></pre>\n<h2><code>unified.js</code> Plugins</h2>\n<p>You can find plugins from the <a href=\"https://github.com/unifiedjs\"><code>unified.js</code></a> ecosystem that can work with this Snowpack plugin:</p>\n<ul>\n<li><a\n  href=\"https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins\"\n><code>remark</code> Plugins</a></li>\n<li><a\n  href=\"https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins\"\n><code>rehype</code> Plugins</a></li>\n</ul>\n<h2>Options</h2>\n<pre><code class=\"hljs language-typescript\"><span class=\"hljs-comment\">/**\n * Represents the options passable to `snowpack-plugin-markdown`\n */</span>\n<span class=\"hljs-keyword\">interface</span> IMarkdownPluginOptions <span class=\"hljs-keyword\">extends</span> ICompileOptions {\n    <span class=\"hljs-comment\">/**\n     * Represents the file extensions used for denote which files\n     * will be parsed by the plugin\n     */</span>\n    <span class=\"hljs-attr\">extensions</span>: <span class=\"hljs-built_in\">string</span>[];\n\n    <span class=\"hljs-comment\">/**\n     * Represents options passable to `remark-rehype` for Markdown (MDAST) -> HTML (HAST) conversion\n     * See more information at: https://github.com/remarkjs/remark-rehype#api\n     */</span>\n    mdast2hast: IMDASTToHASTOptions;\n\n    <span class=\"hljs-comment\">/**\n     * Represents options passable to `<span class=\"hljs-doctag\">@starptech</span>/prettyhtml-hast-to-html` for HTML stringification\n     * See more information at: https://github.com/Prettyhtml/prettyhtml/tree/master/packages/prettyhtml-hast-to-html#api\n     */</span>\n    stringify: IHASTToHTMLOptions;\n\n    <span class=\"hljs-comment\">/**\n     * Represents that options frontmatter types configured for parsing to `remark-frontmatter`\n     * See more information at: https://github.com/remarkjs/remark-frontmatter#api\n     */</span>\n    frontmatter: IFrontMatterOptions[];\n\n    <span class=\"hljs-comment\">/**\n     * Represents `rehype`-based plugins to be configured with a `unified.Processor`\n     */</span>\n    rehype: IRehypePlugin[];\n\n    <span class=\"hljs-comment\">/**\n     * Represents `remark`-based plugins to be configured with a `unified.Processor`\n     */</span>\n    remark: IRemarkPlugin[];\n}\n\n<span class=\"hljs-keyword\">interface</span> IMDASTToHASTOptions {\n    <span class=\"hljs-comment\">/**\n     * Represents whether the Compiler should drop raw HTML markup from\n     * the Markdown document\n     */</span>\n    <span class=\"hljs-attr\">allowDangerousHtml</span>: <span class=\"hljs-built_in\">boolean</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> IHASTToHTMLOptions {\n    <span class=\"hljs-comment\">/**\n     * When this property true the node is skipped for attribute collapsing.\n     */</span>\n    <span class=\"hljs-attr\">ignore</span>: <span class=\"hljs-built_in\">boolean</span>;\n\n    <span class=\"hljs-comment\">/**\n     * When this property true the node is skipped for attribute collapsing.\n     */</span>\n    preserveAttrWrapping: <span class=\"hljs-built_in\">boolean</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> IFrontMatterOptions&lt;T = {[key: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">any</span>}> {\n    <span class=\"hljs-comment\">/**\n     * Represents how the Frontmatter type should be identified as. Usually\n     * it should be the the shortname of your syntax type, e.g. json, yaml, etc...\n     */</span>\n    <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">string</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Represents the character used to construct fences. By providing an object with open\n     * and close. different characters can be used for opening and closing fences. For example\n     * * the character '-' will result in '---' being used as the fence.\n     */</span>\n    marker: <span class=\"hljs-built_in\">string</span> | {<span class=\"hljs-attr\">open</span>: <span class=\"hljs-built_in\">string</span>; close: <span class=\"hljs-built_in\">string</span>};\n\n    <span class=\"hljs-comment\">/**\n     * Represents the string used as the complete fence. By providing an object with open and\n     * close different values can be used for opening and closing fences. This can be used too\n     * if fences contain different characters or lengths other than 3\n     */</span>\n    fence: <span class=\"hljs-built_in\">string</span> | {<span class=\"hljs-attr\">open</span>: <span class=\"hljs-built_in\">string</span>; close: <span class=\"hljs-built_in\">string</span>};\n\n    <span class=\"hljs-comment\">/**\n     * Represents if the Frontmatter can be anywhere in the Markdown document,\n     * or only at the top of the document\n     */</span>\n    anywhere: <span class=\"hljs-built_in\">boolean</span>;\n\n    <span class=\"hljs-comment\">/**\n     * Represents a callback to parse frontmatter identified string into a\n     * JSON-serializable Javascript data structure\n     */</span>\n    parser: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">string</span>: <span class=\"hljs-built_in\">string</span></span>) =></span> T;\n}</code></pre>\n<h2>Developer</h2>\n<h3>Installation</h3>\n<p>Open your terminal and install via <code>npm</code>:</p>\n<pre><code\n  class=\"hljs language-sh\"\n>npm install git+https://github.com/novacbn/snowpack-plugin-markdown<span\n  class=\"hljs-comment\"\n>#0.0.1 -D</span></code></pre>\n<p>Install current in-development code:</p>\n<pre><code\n  class=\"hljs language-sh\"\n>npm install git+https://github.com/novacbn/snowpack-plugin-markdown -D</code></pre>";