{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["import {readFile} from \"fs/promises\";\n\nimport type {SnowpackConfig, SnowpackPlugin} from \"snowpack\";\n\nimport type {ICompileOptions} from \"./compiler\";\nimport {compile} from \"./compiler\";\n\n/**\n * Represents the default file extensions used for denote which files\n * will be parsed by the plugin\n *\n * @internal\n */\nconst DEFAULT_INPUT_EXTENSIONS = [\".md\"];\n\n/**\n * Represents the file extensions the plugin outputs to\n *\n * @internal\n */\nconst PLUGIN_OUTPUT_EXTENSIONS = [\".js\"];\n\n/**\n * Formats a parsed Markdown document into a Javascript module\n *\n * @internal\n *\n * @param frontmatter\n * @param html\n */\nconst TEMPLATE_MODULE = (\n    frontmatter: any,\n    html: string\n) => `export const FRONTMATTER = ${JSON.stringify(frontmatter)};\nexport const HTML = ${JSON.stringify(html)};`;\n\n/**\n * Represents the options passable to `snowpack-plugin-markdown`\n */\nexport interface IMarkdownPluginOptions extends ICompileOptions {\n    /**\n     * Represents the file extensions used for denote which files\n     * will be parsed by the plugin\n     */\n    extensions: string[];\n}\n\n/**\n * Returns the options standardized with defaults\n *\n * @internal\n *\n * @param options\n */\nfunction MarkdownPluginOptions(\n    options: Partial<IMarkdownPluginOptions> = {}\n): IMarkdownPluginOptions {\n    const {extensions = DEFAULT_INPUT_EXTENSIONS} = options;\n\n    // @ts-ignore\n    return {\n        ...options,\n        extensions,\n    };\n}\n\n/**\n * Represents the Snowpack Plugin for the package\n */\nexport default <T>(\n    config: SnowpackConfig,\n    options: Partial<IMarkdownPluginOptions> = {}\n): SnowpackPlugin => {\n    options = MarkdownPluginOptions(options);\n\n    const {extensions} = options;\n\n    return {\n        name: \"snowpack-plugin-markdown\",\n        resolve: {\n            // @ts-ignore\n            input: extensions,\n            output: PLUGIN_OUTPUT_EXTENSIONS,\n        },\n\n        async load(file) {\n            const {filePath: file_path} = file;\n\n            const contents = await readFile(file_path, \"utf-8\");\n            const {frontmatter, html} = await compile<T>(contents, options);\n\n            const script = TEMPLATE_MODULE(frontmatter, html);\n\n            return {\n                \".js\": {\n                    code: script,\n                },\n            };\n        },\n    };\n};\n"],
  "mappings": "AAAA;AAKA;AAQA,MAAM,2BAA2B,CAAC;AAOlC,iCAAiC,CAAC;AAUlC,wBAAwB,uBAGnB,8BAA8B,KAAK,UAAU;AAAA,sBAC5B,KAAK,UAAU;AAoBrC,yCAC+C;AAE3C,SAAO,aAAa,4BAA4B;AAGhD,SAAO;AAAA,OACA;AAAA,IACH;AAAA;AAAA;AAOR,kBAAe,mBAEgC;AAE3C,YAAU,sBAAsB;AAEhC,SAAO,cAAc;AAErB,SAAO;AAAA,IACH,MAAM;AAAA,IACN,SAAS;AAAA,MAEL,OAAO;AAAA,MACP,QAAQ;AAAA;AAAA,UAGN;AACF,aAAO,uBAAuB;AAE9B,uBAAiB,MAAM,SAAS,WAAW;AAC3C,aAAO,aAAa,QAAQ,MAAM,QAAW,UAAU;AAEvD,qBAAe,gBAAgB,aAAa;AAE5C,aAAO;AAAA,QACH,OAAO;AAAA,UACH,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
