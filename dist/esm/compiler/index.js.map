{
  "version": 3,
  "sources": ["../../../src/compiler/index.ts"],
  "sourcesContent": ["import unified from \"unified\";\n\nimport type {Options as IMDASTFromMarkdownOptions} from \"mdast-util-from-markdown\";\nimport markdown_parse from \"remark-parse\";\n\nimport hast_raw from \"rehype-raw\";\n\nimport type {Options as IMDASTToHASTOptions} from \"mdast-util-to-hast\";\nimport mdast_to_hast from \"remark-rehype\";\n\nimport type {IRehypeOptions} from \"./parsers/rehype\";\nimport {configure as configure_rehype} from \"./parsers/rehype\";\n\nimport type {IRemarkOptions} from \"./parsers/remark\";\nimport {configure as configure_remark} from \"./parsers/remark\";\n\nimport type {IHASTToHTMLOptions} from \"./attachers/html\";\nimport {html_stringify} from \"./attachers/html\";\n\n/**\n * HACK: Hackity hackity! Quickly converted from Javascript into Typescript from\n * a different project. So uh, there be dargons\n */\n\n/**\n * Represents the composite of options that are passable to [[compile]]\n */\nexport interface ICompileOptions extends IProcessorOptions, IRemarkOptions, IRehypeOptions {}\n\n/**\n * Represents the baseline options passable to [[compile]]\n */\nexport interface IProcessorOptions {\n    /**\n     * Represents options passable to `remark-parse` for Markdown parsing\n     */\n    parse: IMDASTFromMarkdownOptions;\n\n    /**\n     * Represents options passable to `remark-rehype` for Markdown (MDAST) -> HTML (HAST) conversion\n     * See more information at: https://github.com/remarkjs/remark-rehype#api\n     */\n    mdast2hast: IMDASTToHASTOptions;\n\n    /**\n     * Represents options passable to `@starptech/prettyhtml-hast-to-html` for HTML stringification\n     * See more information at: https://github.com/Prettyhtml/prettyhtml/tree/master/packages/prettyhtml-hast-to-html#api\n     */\n    stringify: Partial<IHASTToHTMLOptions>;\n}\n\n/**\n * Represents the results returned by calling [[compile]]\n */\nexport interface ICompileResult<T = {[key: string]: any}> {\n    /**\n     * Represents the parsed Frontmatter, if was present in the document\n     */\n    frontmatter: T;\n\n    /**\n     * Represents the converted HTML from parsing the Markdown document\n     */\n    html: string;\n\n    /**\n     * Represents the original Markdown document, pre-parsed\n     */\n    markdown: string;\n}\n\n/**\n * Returns the options standardized with defaults\n *\n * @internal\n *\n * @param options\n */\nfunction ProcessorOptions(options: Partial<IProcessorOptions> = {}): IProcessorOptions {\n    const {mdast2hast = {}, parse = {}, stringify = {}} = options;\n\n    return {\n        parse: {...parse},\n        stringify: {...stringify},\n\n        mdast2hast: {\n            allowDangerousHtml: true,\n\n            ...mdast2hast,\n        },\n    };\n}\n\n/**\n * Returns a Markdown document parsed into a HTML string and Frontmatter data, with\n * a preconfigured `unified.Processor` based pipeline. Accepting plugins to extend functionality\n * @param markdown\n * @param options\n */\nexport async function compile<T extends Object>(\n    markdown: string,\n    options: Partial<ICompileOptions> = {}\n): Promise<ICompileResult<T>> {\n    const processor = unified();\n    // @ts-ignore\n    const {mdast2hast, parse, stringify} = ProcessorOptions(options);\n\n    processor.use(markdown_parse, parse).use(html_stringify, stringify);\n\n    configure_remark(processor, options);\n    processor.use(mdast_to_hast, mdast2hast).use(hast_raw);\n    configure_rehype(processor, options);\n\n    const vfile = await processor.process(markdown);\n    const frontmatter = processor.data(\"frontmatter\") as Map<string, any>;\n\n    return {\n        markdown,\n        frontmatter: Object.fromEntries(frontmatter) as T,\n        html: vfile.toString(),\n    };\n}\n"],
  "mappings": "AAAA;AAGA;AAEA;AAGA;AAGA;AAGA;AAGA;AA6DA,0BAA0B,UAAsC;AAC5D,SAAO,aAAa,IAAI,QAAQ,IAAI,YAAY,MAAM;AAEtD,SAAO;AAAA,IACH,OAAO,IAAI;AAAA,IACX,WAAW,IAAI;AAAA,IAEf,YAAY;AAAA,MACR,oBAAoB;AAAA,SAEjB;AAAA;AAAA;AAAA;AAWf,2CAEwC;AAEpC,oBAAkB;AAElB,SAAO,YAAY,OAAO,aAAa,iBAAiB;AAExD,YAAU,IAAI,gBAAgB,OAAO,IAAI,gBAAgB;AAEzD,mBAAiB,WAAW;AAC5B,YAAU,IAAI,eAAe,YAAY,IAAI;AAC7C,mBAAiB,WAAW;AAE5B,gBAAc,MAAM,UAAU,QAAQ;AACtC,sBAAoB,UAAU,KAAK;AAEnC,SAAO;AAAA,IACH;AAAA,IACA,aAAa,OAAO,YAAY;AAAA,IAChC,MAAM,MAAM;AAAA;AAAA;",
  "names": []
}
