{
  "version": 3,
  "sources": ["../../../../src/compiler/parsers/remark.ts"],
  "sourcesContent": ["import type {Processor} from \"unified\";\nimport type {Node} from \"unist\";\nimport type {VFile} from \"vfile\";\n\nimport toml from \"toml\";\nimport yaml from \"js-yaml\";\n\nimport frontmatter_parse from \"remark-frontmatter\";\nimport type {IFrontMatterOptions} from \"../attachers/markdown\";\nimport {frontmatter_persist} from \"../attachers/markdown\";\n\n/**\n * Represents a `remark`-based `unified` Attacher, for modifying HAST\n */\nexport type IRemarkAttacher<T> = (this: Processor, options: T) => IRemarkTransformer | undefined;\n\n/**\n * Represents a `remark`-based `unified` Transformer, for modifying HAST\n */\nexport type IRemarkTransformer = (tree: Node, file: VFile) => Node | undefined;\n\n/**\n * Represents a `remark`-based plugin, that will be configured for a `unified.Processor`\n */\nexport type IRemarkPlugin = [IRemarkAttacher<any>, any];\n\n/**\n * Represents options passable for `remark` configured `unified.Processor`\n */\nexport interface IRemarkOptions {\n    /**\n     * Represents that options frontmatter types configured for parsing to `remark-frontmatter`\n     * See more information at: https://github.com/remarkjs/remark-frontmatter#api\n     */\n    frontmatter: IFrontMatterOptions[];\n\n    /**\n     * Represents `remark`-based plugins to be configured with a `unified.Processor`\n     */\n    remark: IRemarkPlugin[];\n}\n\n/**\n * Returns the options standardized with defaults\n *\n * @internal\n *\n * @param options\n */\nfunction RemarkOptions(options: Partial<IRemarkOptions> = {}): IRemarkOptions {\n    let {frontmatter = [], remark = []} = options;\n\n    frontmatter = [\n        {\n            type: \"json\",\n            fence: {open: \"{\", close: \"}\"},\n            parser: (s: string) => JSON.parse(\"{\" + s + \"}\"),\n        },\n\n        {type: \"toml\", marker: \"+\", parser: (s: string) => toml.parse(s)},\n        {type: \"yaml\", marker: \"-\", parser: (s: string) => yaml.safeLoad(s)},\n\n        ...frontmatter,\n    ];\n\n    remark = [[frontmatter_parse, frontmatter], [frontmatter_persist, frontmatter], ...remark];\n\n    return {\n        frontmatter,\n        remark,\n    };\n}\n\n/**\n * Configures a `unified.Processor` with a package-level standard of `remark`-based plugins\n *\n * @internal\n *\n * @param processor\n * @param options\n */\nexport function configure(processor: Processor, options: Partial<IRemarkOptions> = {}): void {\n    const {remark: plugins} = RemarkOptions(options);\n\n    for (const plugin of plugins) {\n        if (Array.isArray(plugin)) processor.use(plugin[0], plugin[1]);\n        else processor.use(plugin);\n    }\n}\n"],
  "mappings": "AAIA;AACA;AAEA;AAEA;AAwCA,uBAAuB,UAAmC;AACtD,OAAK,cAAc,IAAI,SAAS,MAAM;AAEtC,gBAAc;AAAA,IACV;AAAA,MACI,MAAM;AAAA,MACN,OAAO,CAAC,MAAM,KAAK,OAAO;AAAA,MAC1B,QAAQ,OAAe,KAAK,MAAM,MAAM,IAAI;AAAA;AAAA,IAGhD,CAAC,MAAM,QAAQ,QAAQ,KAAK,QAAQ,OAAe,MAAK,MAAM;AAAA,IAC9D,CAAC,MAAM,QAAQ,QAAQ,KAAK,QAAQ,OAAe,KAAK,SAAS;AAAA,IAEjE,GAAG;AAAA;AAGP,WAAS,CAAC,CAAC,mBAAmB,cAAc,CAAC,qBAAqB,cAAc,GAAG;AAEnF,SAAO;AAAA,IACH;AAAA,IACA;AAAA;AAAA;AAYD,wCAA4E;AAC/E,SAAO,mBAAmB,cAAc;AAExC,uBAAqB;AACjB,QAAI,MAAM,QAAQ;AAAS,gBAAU,IAAI,OAAO,IAAI,OAAO;AAAA;AACtD,gBAAU,IAAI;AAAA;AAAA;",
  "names": []
}
