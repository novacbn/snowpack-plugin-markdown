{
  "version": 3,
  "sources": ["../../../src/compiler/parsers/rehype.ts", "../../../src/compiler/parsers/rehype.ts"],
  "sourcesContent": ["import type {Processor} from \"unified\";\nimport type {Node} from \"unist\";\nimport type {VFile} from \"vfile\";\n\n/**\n * Represents a `rehype`-based `unified` Attacher, for modifying HAST\n */\nexport type IRehypeAttacher<T> = (this: Processor, options: T) => IRehypeTransformer | undefined;\n\n/**\n * Represents a `remark`-based `unified` Transformer, for modifying HAST\n */\nexport type IRehypeTransformer = (tree: Node, file: VFile) => Node | undefined;\n\n/**\n * Represents a `rehype`-based plugin, that will be configured for a `unified.Processor`\n */\nexport type IRehypePlugin = [IRehypeAttacher<any>, any];\n\n/**\n * Represents options passable for `rehype` configured `unified.Processor`\n */\nexport interface IRehypeOptions {\n    /**\n     * Represents `rehype`-based plugins to be configured with a `unified.Processor`\n     */\n    rehype: IRehypePlugin[];\n}\n\n/**\n * Returns the options standardized with defaults\n *\n * @internal\n *\n * @param options\n */\nfunction RehypeOptions(options: Partial<IRehypeOptions> = {}): IRehypeOptions {\n    let {rehype = []} = options;\n\n    rehype = [...rehype];\n\n    return {rehype};\n}\n\n/**\n * Configures a `unified.Processor` with a package-level standard of `rehype`-based plugins\n *\n * @internal\n *\n * @param processor\n * @param options\n */\nexport function configure(processor: Processor, options: Partial<IRehypeOptions> = {}): void {\n    const {rehype: plugins} = RehypeOptions(options);\n\n    for (const plugin of plugins) {\n        if (Array.isArray(plugin)) processor.use(plugin[0], plugin[1]);\n        else processor.use(plugin);\n    }\n}\n", "import type {Processor} from \"unified\";\nimport type {Node} from \"unist\";\nimport type {VFile} from \"vfile\";\n\n/**\n * Represents a `rehype`-based `unified` Attacher, for modifying HAST\n */\nexport type IRehypeAttacher<T> = (this: Processor, options: T) => IRehypeTransformer | undefined;\n\n/**\n * Represents a `remark`-based `unified` Transformer, for modifying HAST\n */\nexport type IRehypeTransformer = (tree: Node, file: VFile) => Node | undefined;\n\n/**\n * Represents a `rehype`-based plugin, that will be configured for a `unified.Processor`\n */\nexport type IRehypePlugin = [IRehypeAttacher<any>, any];\n\n/**\n * Represents options passable for `rehype` configured `unified.Processor`\n */\nexport interface IRehypeOptions {\n    /**\n     * Represents `rehype`-based plugins to be configured with a `unified.Processor`\n     */\n    rehype: IRehypePlugin[];\n}\n\n/**\n * Returns the options standardized with defaults\n *\n * @internal\n *\n * @param options\n */\nfunction RehypeOptions(options: Partial<IRehypeOptions> = {}): IRehypeOptions {\n    let {rehype = []} = options;\n\n    rehype = [...rehype];\n\n    return {rehype};\n}\n\n/**\n * Configures a `unified.Processor` with a package-level standard of `rehype`-based plugins\n *\n * @internal\n *\n * @param processor\n * @param options\n */\nexport function configure(processor: Processor, options: Partial<IRehypeOptions> = {}): void {\n    const {rehype: plugins} = RehypeOptions(options);\n\n    for (const plugin of plugins) {\n        if (Array.isArray(plugin)) processor.use(plugin[0], plugin[1]);\n        else processor.use(plugin);\n    }\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;ACoCA,uBAAuB,UAAmC;AACtD,OAAK,SAAS,MAAM;AAEpB,WAAS,CAAC,GAAG;AAEb,SAAO,CAAC;AAAA;AAWL,wCAA4E;AAC/E,SAAO,mBAAmB,cAAc;AAExC,uBAAqB;AACjB,QAAI,MAAM,QAAQ;AAAS,gBAAU,IAAI,OAAO,IAAI,OAAO;AAAA;AACtD,gBAAU,IAAI;AAAA;AAAA;",
  "names": []
}
