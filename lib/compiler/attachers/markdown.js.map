{
  "version": 3,
  "sources": ["../../../src/compiler/attachers/markdown.ts", "../../../src/compiler/attachers/markdown.ts"],
  "sourcesContent": ["import type {Root} from \"mdast\";\nimport type {Processor} from \"unified\";\n\nimport type {Matter} from \"remark-frontmatter\";\n\n/**\n * Represents the options passable to [[frontmatter_persist]]\n */\nexport interface IFrontMatterOptions<T = {[key: string]: any}> extends Matter {\n    /**\n     * Represents a callback to parse frontmatter identified string into a\n     * JSON-serializable Javascript data structure\n     */\n    parser: (string: string) => T;\n}\n\n/**\n * Parses a MDAST for identified Frontmatter strings, parsing them into data and\n * configuring a `unified.Processor` to persist the structure\n *\n * @internal\n *\n * @param this\n * @param options\n */\nexport function frontmatter_persist(this: Processor, options: IFrontMatterOptions[] = []): any {\n    const processor = this;\n\n    const frontmatter_values = new Map();\n    const frontmatter_types = Object.fromEntries(options.map((config) => [config.type, config]));\n\n    processor.data(\"frontmatter\", frontmatter_values);\n\n    return (tree: Root) => {\n        const {children} = tree;\n\n        const node = children.find((node: any) => !!frontmatter_types[node.type]);\n        if (!node) return;\n\n        const {parser} = frontmatter_types[node.type];\n        const data = parser(node.value as string);\n\n        for (const key in data) frontmatter_values.set(key, data[key]);\n        return {\n            ...tree,\n            children: children.filter((_node: any) => node !== _node),\n        };\n    };\n}\n", "import type {Root} from \"mdast\";\nimport type {Processor} from \"unified\";\n\nimport type {Matter} from \"remark-frontmatter\";\n\n/**\n * Represents the options passable to [[frontmatter_persist]]\n */\nexport interface IFrontMatterOptions<T = {[key: string]: any}> extends Matter {\n    /**\n     * Represents a callback to parse frontmatter identified string into a\n     * JSON-serializable Javascript data structure\n     */\n    parser: (string: string) => T;\n}\n\n/**\n * Parses a MDAST for identified Frontmatter strings, parsing them into data and\n * configuring a `unified.Processor` to persist the structure\n *\n * @internal\n *\n * @param this\n * @param options\n */\nexport function frontmatter_persist(this: Processor, options: IFrontMatterOptions[] = []): any {\n    const processor = this;\n\n    const frontmatter_values = new Map();\n    const frontmatter_types = Object.fromEntries(options.map((config) => [config.type, config]));\n\n    processor.data(\"frontmatter\", frontmatter_values);\n\n    return (tree: Root) => {\n        const {children} = tree;\n\n        const node = children.find((node: any) => !!frontmatter_types[node.type]);\n        if (!node) return;\n\n        const {parser} = frontmatter_types[node.type];\n        const data = parser(node.value as string);\n\n        for (const key in data) frontmatter_values.set(key, data[key]);\n        return {\n            ...tree,\n            children: children.filter((_node: any) => node !== _node),\n        };\n    };\n}\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;ACyBO,6BAA8C,UAAiC;AAClF,oBAAkB;AAElB,6BAA2B,IAAI;AAC/B,4BAA0B,OAAO,YAAY,QAAQ,IAAI,YAAY,CAAC,OAAO,MAAM;AAEnF,YAAU,KAAK,eAAe;AAE9B,SAAO;AACH,WAAO,YAAY;AAEnB,iBAAa,SAAS,KAAK,WAAe,CAAC,CAAC,kBAAkB,MAAK;AACnE,QAAI,CAAC;AAAM;AAEX,WAAO,UAAU,kBAAkB,KAAK;AACxC,iBAAa,OAAO,KAAK;AAEzB,sBAAkB;AAAM,yBAAmB,IAAI,KAAK,KAAK;AACzD,WAAO;AAAA,SACA;AAAA,MACH,UAAU,SAAS,OAAO,WAAgB,SAAS;AAAA;AAAA;AAAA;",
  "names": []
}
